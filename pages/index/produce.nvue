<template>
	<view class="tabs">
		<scroll-view id="tab-bar" class="scroll-h" :scroll-x="true" :show-scrollbar="false">
			<view v-for="(tab,index) in tabBars" :key="tab.id" class="uni-tab-item" :id="tab.id" :data-current="index"
				@click="ontabtap">
				<text class="uni-tab-item-title"
					:class="tabIndex==index ? 'uni-tab-item-title-active' : ''">{{tab.name}}</text>
			</view>
		</scroll-view>
		<view class="line-h"></view>
		<swiper :current="tabIndex" class="swiper-box" style="flex: 1;" :duration="300" @change="ontabchange">
			<swiper-item class="swiper-item" v-for="(tab,index1) in tabBars" :key="index1">
				<scroll-view class="scroll-v list" enableBackToTop="true" scroll-y @scrolltolower="loadMore(index1)">
					<produce-item :options="tab.data" @click="goDetail"></produce-item>
					<!-- </view> -->
				</scroll-view>
			</swiper-item>
		</swiper>
	</view>
</template>
<script>
	import produceItem from '../../components/produce-item/produce-item.vue';

	export default {
		components: {
			produceItem
		},
		data() {
			return {
				tabIndex: 0,
				tabBars: [],
				initDataMaxCount: 10,
			}
		},
		onShow() {
			console.log("onShow", this.tabBars.length);
			this.initData();
		},
		onLoad() {},
		methods: {
			initData() {
				if (this.tabBars === null || this.tabBars.length === 0) {
					uni.http.getProduceCategory(uni.getStorageSync(getApp().globalData.openIdCacheName),
						getApp().globalData.appId, (res, success) => {
							if (success) {
								this.tabBars = res.data.data.dataList;
							} else {
								if (this.initDataMaxCount-- > 0) {
									setTimeout(() => {
										this.initData()
									}, 2000);
								}
							}
						});
				}
			},
			goDetail(e) {
				// getApp().globalData.produceInfo = e.content;
				// uni.switchTab({
				// 	url: 'dialog'
				// });
				console.log("roleDialog", e);
				uni.navigateTo({
					url: '/pages/user/roleDialog?info=' + JSON.stringify(e)
				});
			},
			loadMore(e) {
				console.log("loadMore", "不用分页加载");
			},
			ontabtap(e) {
				let index = e.target.dataset.current || e.currentTarget.dataset.current;
				this.switchTab(index);
			},
			ontabchange(e) {
				let index = e.target.current || e.detail.current;
				this.switchTab(index);
			},
			switchTab(index) {
				this.tabIndex = index;
			},
		}
	}
</script>

<style>
	/* #ifndef APP-PLUS */
	page {
		width: 100%;
		min-height: 100%;
		display: flex;
	}

	/* #endif */

	.tabs {
		flex: 1;
		flex-direction: column;
		overflow: hidden;
		background-color: #ffffff;
		/* #ifndef APP-PLUS */
		height: 100vh;
		/* #endif */
	}

	.scroll-h {
		width: 750rpx;
		/* #ifdef H5 */
		width: 100%;
		/* #endif */
		height: 100rpx;
		flex-direction: row;
		/* #ifndef APP-PLUS */
		white-space: nowrap;
		/* #endif */
		/* flex-wrap: nowrap; */
		/* border-color: #cccccc;
		border-bottom-style: solid;
		border-bottom-width: 1px; */
	}

	.line-h {
		height: 1rpx;
		background-color: #cccccc;
	}

	.uni-tab-item {
		/* #ifndef APP-PLUS */
		display: inline-block;
		/* #endif */
		flex-wrap: nowrap;
		padding-left: 32rpx;
		padding-right: 32rpx;
	}

	.uni-tab-item-title {
		color: #555;
		font-size: 36rpx;
		height: 100rpx;
		line-height: 100rpx;
		flex-wrap: nowrap;
		/* #ifndef APP-PLUS */
		white-space: nowrap;
		/* #endif */
	}

	.uni-tab-item-title-active {
		color: #007AFF;
		font-weight: bold;
		font-size: 38rpx;
	}

	.swiper-box {
		flex: 1;
		height: 100vh;
	}

	.swiper-item {
		flex: 1;
		flex-direction: row;
	}

	.scroll-v {
		flex: 1;
		flex-direction: column;
		width: 750rpx;
		width: 100%;
	}

	.update-tips {
		position: absolute;
		left: 0;
		top: 41px;
		right: 0;
		padding-top: 5px;
		padding-bottom: 5px;
		background-color: #FDDD9B;
		align-items: center;
		justify-content: center;
		text-align: center;
	}

	.update-tips-text {
		font-size: 14px;
		color: #ffffff;
	}

	.refresh {
		width: 750rpx;
		width: 100%;
		height: 64px;
		justify-content: center;
	}

	.refresh-view {
		flex-direction: row;
		flex-wrap: nowrap;
		align-items: center;
		justify-content: center;
	}

	.refresh-icon {
		width: 30px;
		height: 30px;
		transition-duration: .5s;
		transition-property: transform;
		transform: rotate(0deg);
		transform-origin: 15px 15px;
	}

	.refresh-icon-active {
		transform: rotate(180deg);
	}

	.loading-icon {
		width: 20px;
		height: 20px;
		margin-right: 5px;
		color: #999999;
	}

	.loading-text {
		margin-left: 2px;
		font-size: 16px;
		color: #999999;
	}

	.loading-more {
		align-items: center;
		justify-content: center;
		padding-top: 10px;
		padding-bottom: 10px;
		text-align: center;
	}

	.loading-more-text {
		font-size: 28rpx;
		color: #999;
	}
</style>